version: "3.9"

services:
    #################### app ####################
    app:
        build:
            context: .
            dockerfile: .docker/dotnet/${APP_ENV:-Production}.Dockerfile
        profiles:
            - Development
            - Staging
            - Production
        ports:
            - ${APP_PORT:-8090}:80
        environment:
            TZ: ${APP_TZ:-Asia/Tehran}
            ASPNETCORE_ENVIRONMENT: ${APP_ENV:-Production}
        restart: unless-stopped
        logging:
            options:
                max-size: "50m"
        depends_on:
            - mysql
            - redis
        networks:
            - app-network

    #################### mysql ####################
    mysql:
        # image: mariadb:11.1-rc-jammy
        image: mysql:8.0-debian
        ports:
            - ${LOCAL_DB_PORT:-}:${DB_PORT:-3306}
        environment:
            TZ: ${APP_TZ:-Asia/Tehran}
            MYSQL_RANDOM_ROOT_PASSWORD: yes
            MYSQL_DATABASE: ${DB_DATABASE:-clean_architecture}
            MYSQL_USER: ${DB_USERNAME:-admin}
            MYSQL_PASSWORD: ${DB_PASSWORD:-admin}
            MYSQL_TCP_PORT: ${DB_PORT:-3306}
        restart: unless-stopped
        logging:
            options:
                max-size: "50m"
        volumes:
            - mysql-data:/var/lib/mysql/
        networks:
            - app-network
            - phpmyadmin-network
        healthcheck:
            test: [ "CMD", "mysqladmin", "ping", "-h", "localhost" ]
            # interval: 30s
            timeout: 10s
            retries: 6

    #################### redis #################### TODO: redis password
    redis:
        image: redis:7.2-rc
        ports:
            - ${LOCAL_REDIS_PORT:-}:${REDIS_PORT:-6379}
        hostname: ${REDIS_HOST:-127.0.0.1}
        environment:
            TZ: ${APP_TZ:-Asia/Tehran}
        restart: unless-stopped
        logging:
            options:
                max-size: "50m"
        command: --port ${REDIS_PORT:-6379}
        # command: sh -c 'if [ -n "${REDIS_PASSWORD:-1234}" ]; then redis-server --requirepass "${REDIS_PASSWORD:-1234}"; else redis-server; fi'
        networks:
            - app-network
            - redis-commander-network
        healthcheck:
            test: [ "CMD", "redis-cli", "ping" ]
            # interval: 30s
            timeout: 5s
            retries: 6

    ################### rabbitmq ##################
    rabbitmq:
        image: heidiks/rabbitmq-delayed-message-exchange:3.10.2-management
        ports:
            - ${LOCAL_RABBIT_PORT:-}:${RABBIT_PORT:-5672}
            - ${LOCAL_RABBIT_MANAGEMENT:-}:${RABBIT_MANAGEMENT:-15672}
        environment:
            - RABBITMQ_DEFAULT_USER=${AMQPUSERNAME:-guest}
            - RABBITMQ_DEFAULT_PASS=${AMQPPASSWORD:-guest}
            - RABBITMQ_DEFAULT_VHOST=${AMQPVIRTUALHOST:-/}
        restart: unless-stopped
        logging:
            options:
                max-size: "50m"
        volumes:
            - rabbit-data:/var/lib/rabbitmq

    ########################### PHPMYADMIN ###########################
    phpmyadmin:
        image: phpmyadmin:5.2-apache
        container_name: phpmyadmin
        restart: unless-stopped
        tty: true
        profiles:
            - phpmyadmin
        ports:
            - "8080:80"
        logging:
            options:
                max-size: "50m"
        environment:
            TZ: ${APP_TZ:-Asia/Tehran}
            PMA_HOST: mysql
            PMA_PORT: ${DB_PORT:-3306}
        networks:
            - phpmyadmin-network

    ########################### REDIS-COMMANDER ########################### TODO: redis password
    redis-commander:
        image: rediscommander/redis-commander:latest
        container_name: redis-commander
        restart: unless-stopped
        tty: true
        profiles:
            - redis-commander
        ports:
            - "8081:8081"
        environment:
            TZ: "Asia/Tehran"
            REDIS_HOSTS: local:${REDIS_HOST:-127.0.0.1}:${REDIS_PORT:-6379}
            # REDIS_PASSWORD: ${REDIS_PASSWORD:-1234}
        networks:
            - redis-commander-network

# Networks
networks:
    app-network:
        driver: bridge
        external: false
    phpmyadmin-network:
        driver: bridge
        external: false
    redis-commander-network:
        driver: bridge
        external: false

# Volumes
volumes:
    mysql-data:
        driver: local
    rabbit-data:
        driver: local
